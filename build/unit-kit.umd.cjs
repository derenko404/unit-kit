(function(o,r){typeof exports=="object"&&typeof module<"u"?r(exports):typeof define=="function"&&define.amd?define(["exports"],r):(o=typeof globalThis<"u"?globalThis:o||self,r(o.UnitKit={}))})(this,function(o){"use strict";const a={time:{units:["ms","s","min","h","d"],conversions:{ms:1,s:1e3,min:6e4,h:36e5,d:864e5}},distance:{units:["mm","cm","inch","dm","m","km"],conversions:{mm:1,cm:10,inch:25.4,dm:100,m:1e3,km:1e6}},memory:{units:["b","kb","mb","gb","tb","pb"],conversions:{b:1,kb:1e3,mb:1048576,gb:1073741824,tb:1099511627776,pb:0x4000000000000}}},d={units:{time:{defaultParseTo:"ms",precision:0},distance:{defaultParseTo:"mm",precision:2},memory:{defaultParseTo:"b",precision:0}}},f=/^(\d+(\.\d+)?)(\s?)([a-zA-Z]+)$/,l=n=>{const t=n.trim().match(f);if(!t)throw new Error(`unknown input format ${n}`);const e=parseFloat(t[1]),i=t[4].toLowerCase();for(const[s,{units:u}]of Object.entries(a))if(u.includes(i))return{value:e,type:s,unit:i};throw new Error(`unknown unit type ${n}`)},c=(n,t)=>{const e=l(n),i=d.units[e.type],s=t??i.defaultParseTo,{conversions:u,units:T}=a[e.type];if(!T.includes(s))throw new Error(`unknown output unit ${s}`);const m=e.value*u[e.unit]/u[s],b=i.precision;return{formattedValue:`${m.toFixed(b)}`,valueAsNumber:m,unit:s}},p={parse:c,safeParse:(n,t)=>{try{return c(n,t)}catch(e){return console.error(e),null}}};o.u=p,Object.defineProperty(o,Symbol.toStringTag,{value:"Module"})});
